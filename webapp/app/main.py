import os
from pathlib import Path
from fastapi import FastAPI, Request, Response, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from starlette.middleware.sessions import SessionMiddleware
from dotenv import load_dotenv
from datetime import datetime
from aiogram import Bot, Router, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func
import aiohttp
import secrets
import asyncio
from webapp.app.services.db import init_db, User, get_user_by_id, get_user_workouts, get_user_stats, get_user_goals, check_achieved_goals, AsyncSessionLocal

# –∫–æ—Ä–µ–Ω—å –∫–∞—Ç–∞–ª–æ–≥–∞ webapp/app
BASE_DIR = Path(__file__).resolve().parent

# –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv(BASE_DIR.parent.parent / ".env")

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à—É –ë–î
from webapp.app.routers import auth, dashboard, workouts, stats, profile, goals

app = FastAPI()

# —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª–æ–≥–∏–Ω–∞/–ª–æ–≥–∞—É—Ç–∞
app.add_middleware(
    SessionMiddleware,
    secret_key=os.getenv("SECRET_KEY", "changeme!"),
    session_cookie="session",
)

# —Å—Ç–∞—Ç–∏–∫–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º MIME-—Ç–∏–ø–æ–≤
app.mount(
    "/static",
    StaticFiles(directory=BASE_DIR / "static", html=True),
    name="static"
)

# —à–∞–±–ª–æ–Ω—ã
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä datetimeformat –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
def datetimeformat(value, format="%d.%m.%Y %H:%M"):
    if isinstance(value, datetime):
        return value.strftime(format)
    return value

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
print("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ñ–∏–ª—å—Ç—Ä datetimeformat")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
templates.env.filters["datetimeformat"] = datetimeformat
print("–§–∏–ª—å—Ç—Ä datetimeformat –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

# Telegram Bot
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
APP_URL = os.getenv("WEBAPP_URL")
WEBHOOK_PATH = "/telegram/webhook"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
router = Router()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
webapp_button = InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=types.WebAppInfo(url=APP_URL))
webapp_keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
async def check_goals_task():
    while True:
        try:
            achieved_goals = await check_achieved_goals()
            for goal, user in achieved_goals:
                if user.telegram_id:
                    goal_description = ""
                    if goal.goal_type == "calories":
                        goal_description = f"–°–∂–µ—á—å {goal.target_value} –∫–∞–ª–æ—Ä–∏–π"
                    elif goal.goal_type == "workouts":
                        goal_description = f"–ü—Ä–æ–≤–µ—Å—Ç–∏ {goal.target_value} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
                    elif goal.goal_type == "duration":
                        goal_description = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è {goal.target_value} –º–∏–Ω—É—Ç"
                    await bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {user.username}!\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏: {goal_description}!",
                        parse_mode=ParseMode.HTML
                    )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–µ–π: {e}")
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

@app.on_event("startup")
async def on_startup():
    await init_db()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–µ–π
    asyncio.create_task(check_goals_task())
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    # await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    # print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command(commands=["start"]))
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π /link <username> –¥–ª—è —Å–≤—è–∑–∫–∏ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=webapp_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link
@router.message(Command(commands=["link"]))
async def link_profile(message: types.Message):
    args = message.text.split()
    if len(args) == 2:
        username = args[1]
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(User).where(User.username == username))
            user = result.scalars().first()
            if user:
                user.telegram_id = str(message.chat.id)
                session.add(user)
                await session.commit()
                await message.reply(
                    f"–ü—Ä–æ—Ñ–∏–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º Telegram!\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
                    reply_markup=webapp_keyboard
                )
            else:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /link <username>")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    update = types.Update(**await request.json())
    await router.process_update(update)
    return Response(status_code=200)

@app.post("/logout")
async def logout(request: Request):
    request.session.clear()
    return RedirectResponse("/", status_code=302)

@app.get("/clear-session")
async def clear_session(request: Request):
    request.session.clear()
    return RedirectResponse("/", status_code=302)

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSRF-—Ç–æ–∫–µ–Ω
    if "csrf_token" not in request.session:
        request.session["csrf_token"] = secrets.token_hex(16)
    is_authenticated = bool(request.session.get("user_id"))
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {is_authenticated}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    user = None
    stats = {"total_workouts": 0, "total_calories": 0, "total_minutes": 0}
    recent_activities = []
    user_weight = None
    goals = []
    calories_result = request.session.pop("calories_result", None)
    error = request.session.pop("error", None)

    if is_authenticated:
        user_id = request.session.get("user_id")
        print(f"User ID: {user_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        async with AsyncSessionLocal() as session:
            print("–û—Ç–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é —Å –ë–î")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await get_user_by_id(user_id)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.username if user else None}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            if user:
                user_weight = user.weight
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                stats = await get_user_stats(user_id)
                print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                recent_activities = await get_user_workouts(user_id, limit=5)
                print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: {recent_activities}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                goals = await get_user_goals(user_id)
                print(f"–¶–µ–ª–∏: {goals}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    print("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ home.html")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    return templates.TemplateResponse(
        "home.html",
        {
            "request": request,
            "is_authenticated": is_authenticated,
            "username": user.username if user else None,
            "recent_activities": recent_activities,
            "stats": stats if stats else {"total_workouts": 0, "total_calories": 0, "total_minutes": 0},
            "user_weight": user_weight,
            "goals": goals,
            "calories_result": calories_result,
            "error": error,
            "current_year": datetime.now().year,
            "csrf_token": request.session.get("csrf_token")
        }
    )

async def get_met_from_grok(activity: str, intensity: str) -> float:
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Grok
    prompt = (
        f"Estimate the MET (Metabolic Equivalent of Task) value for the activity '{activity}' "
        f"with {intensity} intensity. Provide only the numerical MET value (e.g., 7.0) without any additional text."
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API xAI (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å API-–∫–ª—é—á –≤ .env)
    api_key = os.getenv("XAI_API_KEY")
    if not api_key:
        raise ValueError("XAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "prompt": prompt,
        "max_tokens": 10,
        "temperature": 0.7
    }

    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.telegram.org/v1/completions", headers=headers, json=payload) as response:
            if response.status != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ API Grok: {response.status} - {await response.text()}")
            data = await response.json()
            met_str = data.get("choices", [{}])[0].get("text", "3.0").strip()
            try:
                return float(met_str)
            except ValueError:
                return 3.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

@app.post("/calculate-calories", response_class=HTMLResponse)
async def calculate_calories(request: Request, csrf_token: str = Form(...)):
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /calculate-calories")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if csrf_token != request.session.get("csrf_token"):
        request.session["error"] = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CSRF-—Ç–æ–∫–µ–Ω."
        return RedirectResponse("/", status_code=302)
    is_authenticated = bool(request.session.get("user_id"))
    if not is_authenticated:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –Ω–∞ /login")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return RedirectResponse("/login", status_code=302)

    form = await request.form()
    activity = form.get("activity")
    intensity = form.get("intensity")
    print(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}, –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    try:
        duration = float(form.get("duration"))
        weight = float(form.get("weight", 70))  # –í–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 70 –∫–≥
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}, –í–µ—Å: {weight}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    except (ValueError, TypeError):
        request.session["error"] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."
        print("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return RedirectResponse("/", status_code=302)

    if duration <= 0 or weight <= 0:
        request.session["error"] = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–µ—Å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0."
        print("–û—à–∏–±–∫–∞: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –≤–µ—Å <= 0")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return RedirectResponse("/", status_code=302)

    # –ü–æ–ª—É—á–∞–µ–º MET –æ—Ç Grok
    try:
        met = await get_met_from_grok(activity, intensity)
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MET: {met}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ MET –æ—Ç Grok: {e}")
        met = 3.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    # –†–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π: MET √ó –≤–µ—Å (–∫–≥) √ó –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)
    duration_hours = duration / 60
    calories_burned = met * weight * duration_hours
    print(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {calories_burned}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    request.session["calories_result"] = calories_burned
    return RedirectResponse("/", status_code=302)

# –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(auth.router, prefix="", tags=["auth"])
app.include_router(dashboard.router, prefix="/dashboard", tags=["dashboard"])
app.include_router(workouts.router, prefix="/workouts", tags=["workouts"])
app.include_router(stats.router, prefix="/stats", tags=["stats"])
app.include_router(profile.router, prefix="/profile", tags=["profile"])
app.include_router(goals.router, prefix="/goals", tags=["goals"])