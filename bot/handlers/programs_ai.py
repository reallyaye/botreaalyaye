# bot/handlers/programs_ai.py

import os
import asyncio
from dotenv import load_dotenv

from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from openai import OpenAI

from bot.keyboards import main_menu, cancel_keyboard

# ‚Äî‚Äî‚Äî –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env, —á—Ç–æ–±—ã –∫–ª—é—á–∏ –ø–æ—è–≤–∏–ª—Å—è –≤ os.environ ‚Äî‚Äî‚Äî
load_dotenv()

# ‚Äî‚Äî‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI/SambaNova –∫–ª–∏–µ–Ω—Ç ‚Äî‚Äî‚Äî
API_KEY = os.getenv("SAMBANOVA_API_KEY")  # –ª–∏–±–æ OPENAI_API_KEY
if not API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω SAMBANOVA_API_KEY –≤ .env")

openai_client = OpenAI(
    api_key=API_KEY,
    base_url="https://api.sambanova.ai/v1",  # —É–±–µ—Ä–∏—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI
)

router = Router()

class ProgramAIForm(StatesGroup):
    goal        = State()
    experience  = State()
    frequency   = State()
    equipment   = State()

# 1) –í—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.message(lambda m: m.text == "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def start_ai_program(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(responses={})
    await message.answer(
        "üéØ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã¬ª, ¬´—Å—É—à–∫–∞¬ª):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAIForm.goal)

# 2) –¶–µ–ª—å
@router.message(StateFilter(ProgramAIForm.goal))
async def program_goal(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    responses = await state.get_data()
    responses = {**responses.get("responses", {}), "goal": message.text}
    await state.update_data(responses=responses)

    await message.answer(
        "üí™ –ö–∞–∫–æ–π —É –≤–∞—Å —Å–µ–π—á–∞—Å —É—Ä–æ–≤–µ–Ω—å (–Ω–æ–≤–∏—á–æ–∫/—Å—Ä–µ–¥–Ω–∏–π/–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAIForm.experience)

# 3) –û–ø—ã—Ç
@router.message(StateFilter(ProgramAIForm.experience))
async def program_experience(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    data = await state.get_data()
    responses = {**data["responses"], "experience": message.text}
    await state.update_data(responses=responses)

    await message.answer(
        "üìÖ –°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAIForm.frequency)

# 4) –ß–∞—Å—Ç–æ—Ç–∞
@router.message(StateFilter(ProgramAIForm.frequency))
async def program_frequency(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    data = await state.get_data()
    responses = {**data["responses"], "frequency": message.text}
    await state.update_data(responses=responses)

    await message.answer(
        "üõ†Ô∏è –ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É –≤–∞—Å –µ—Å—Ç—å (–≥–∞–Ω—Ç–µ–ª–∏, —à—Ç–∞–Ω–≥–∞, —Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã, —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ –∏ —Ç.–ø.)?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAIForm.equipment)

# 5) –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
@router.message(StateFilter(ProgramAIForm.equipment))
async def program_equipment(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    data = await state.get_data()
    responses = {**data["responses"], "equipment": message.text}

    await message.answer("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await message.answer_chat_action("typing")

    # –≤—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def ai_request():
        system = (
            "You are a fitness coach. "
            "Generate a concise 1-week training plan. "
            "Format: Day 1: [exercises], Day 2: [exercises], etc. "
            "Keep it brief but informative."
        )
        user_content = (
            f"Goal: {responses['goal']}\n"
            f"Experience: {responses['experience']}\n"
            f"Frequency per week: {responses['frequency']}\n"
            f"Equipment: {responses['equipment']}\n"
        )
        return openai_client.chat.completions.create(
            model="DeepSeek-R1",
            messages=[
                {"role": "system", "content": system},
                {"role": "user",   "content": user_content},
            ],
            temperature=0.7,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            top_p=0.9,       # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens=500,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        )

    try:
        resp = await asyncio.to_thread(ai_request)
        program_text = resp.choices[0].message.content.strip()
    except Exception as e:
        await state.clear()
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", reply_markup=main_menu)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await message.answer(
        f"üìã –í–æ—Ç –≤–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n\n{program_text}",
        reply_markup=main_menu,
        parse_mode="HTML"
    )
    await state.clear()
