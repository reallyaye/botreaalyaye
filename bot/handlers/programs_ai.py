import os
import asyncio
import openai
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from bot.keyboards import main_menu, cancel_keyboard, cancel_button

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI-–∫–ª–∏–µ–Ω—Ç
openai_client = openai.OpenAI(
    api_key=os.getenv("SAMBANOVA_API_KEY"),
    base_url="https://api.sambanova.ai/v1",
)

class ProgramAIForm(StatesGroup):
    goal        = State()
    experience  = State()
    frequency   = State()
    equipment   = State()
    confirm     = State()

# 1) –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∫–Ω–æ–ø–∫–∞ ¬´ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É¬ª
@router.message(lambda m: m.text == "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def start_ai_program(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(responses={})
    await message.answer(
        "üéØ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã¬ª, ¬´—Å—É—à–∫–∞¬ª):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAIForm.goal)

# 2) –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–ª—å
@router.message(StateFilter(ProgramAIForm.goal))
async def program_goal(message: Message, state: FSMContext):
    await state.update_data(responses={**(await state.get_data())["responses"], "goal": message.text})
    await message.answer(
        "üí™ –ö–∞–∫–æ–π —É –≤–∞—Å —Å–µ–π—á–∞—Å —É—Ä–æ–≤–µ–Ω—å (–Ω–æ–≤–∏—á–æ–∫/—Å—Ä–µ–¥–Ω–∏–π/–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAIForm.experience)

# 3) –°–æ–±–∏—Ä–∞–µ–º –æ–ø—ã—Ç
@router.message(StateFilter(ProgramAIForm.experience))
async def program_experience(message: Message, state: FSMContext):
    await state.update_data(responses={**(await state.get_data())["responses"], "experience": message.text})
    await message.answer(
        "üìÖ –°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAIForm.frequency)

# 4) –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
@router.message(StateFilter(ProgramAIForm.frequency))
async def program_frequency(message: Message, state: FSMContext):
    await state.update_data(responses={**(await state.get_data())["responses"], "frequency": message.text})
    await message.answer(
        "üõ†Ô∏è –ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É –≤–∞—Å –µ—Å—Ç—å (–≥–∞–Ω—Ç–µ–ª–∏, —à—Ç–∞–Ω–≥–∞, —Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã, —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ –∏ —Ç.–ø.)?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAIForm.equipment)

# 5) –°–æ–±–∏—Ä–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ò–ò
@router.message(StateFilter(ProgramAIForm.equipment))
async def program_equipment(message: Message, state: FSMContext):
    data = await state.get_data()
    responses = data["responses"]
    responses["equipment"] = message.text

    await message.answer("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è –≤–∞—Å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶", reply_markup=cancel_keyboard)
    await state.set_state(ProgramAIForm.confirm)

    # 6) –í—ã–∑—ã–≤–∞–µ–º –ò–ò –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def ai_request():
        system = (
            "You are a fitness coach. "
            "Based on the following user data, generate a 1-week training plan. "
            "Respond with days and exercises clearly."
        )
        user_content = (
            f"Goal: {responses['goal']}\n"
            f"Experience: {responses['experience']}\n"
            f"Frequency per week: {responses['frequency']}\n"
            f"Equipment: {responses['equipment']}\n"
        )
        return openai_client.chat.completions.create(
            model="DeepSeek-R1",
            messages=[
                {"role": "system", "content": system},
                {"role": "user",   "content": user_content}
            ],
            temperature=0.2,
            top_p=0.1,
        )

    try:
        resp = await asyncio.to_thread(ai_request)
        program_text = resp.choices[0].message.content.strip()
    except Exception as e:
        await state.clear()
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", reply_markup=main_menu)

    # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—á–∏—â–∞–µ–º FSM
    await message.answer(f"üìã –í–æ—Ç –≤–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n\n{program_text}", reply_markup=main_menu)
    await state.clear()
