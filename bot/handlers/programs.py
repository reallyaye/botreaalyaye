# bot/handlers/programs.py

import os
import openai

from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from bot.keyboards import main_menu, cancel_keyboard
from services.db import add_custom_program  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
# –∏–ª–∏: from services.programs import get_program  ‚Äî –µ—Å–ª–∏ –æ—Å—Ç–∞—ë—Ç–µ—Å—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —à–∞–±–ª–æ–Ω–∞—Ö

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI-–∫–ª–∏–µ–Ω—Ç
openai.api_key = os.getenv("OPENAI_API_KEY")

router = Router()

class ProgramAI(StatesGroup):
    goal        = State()  # —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    frequency   = State()  # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
    preferences = State()  # –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ

@router.message(lambda m: m.text == "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def ai_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è —É –≤–∞—Å –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –ø–æ—Ö—É–¥–µ—Ç—å, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏ —Ç.–ø.)",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.goal)

@router.message(StateFilter(ProgramAI.goal))
async def ai_goal(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(goal=message.text)
    await message.answer(
        "üìÖ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.frequency)

@router.message(StateFilter(ProgramAI.frequency))
async def ai_frequency(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(frequency=message.text)
    await message.answer(
        "‚öôÔ∏è –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –∏–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª.",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.preferences)

@router.message(StateFilter(ProgramAI.preferences))
async def ai_preferences(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
    data = await state.get_data()
    data["preferences"] = message.text

    await message.answer("üîç –°–æ—Å—Ç–∞–≤–ª—è—é –≤–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É, —á—É—Ç—å-—á—É—Ç—å‚Ä¶")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, "
        f"—á—å—è —Ü–µ–ª—å: ¬´{data['goal']}¬ª, —Å —á–∞—Å—Ç–æ—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ {data['frequency']} –≤ –Ω–µ–¥–µ–ª—é, "
        f"—É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ¬´{data['preferences']}¬ª. "
        f"–í—ã–≤–µ–¥–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏, –ø–æ 3‚Äì5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –¥–µ–Ω—å."
    )

    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a professional fitness coach."},
            {"role": "user", "content": prompt},
        ],
        temperature=0.7,
        max_tokens=600,
    )

    program_text = response.choices[0].message.content.strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(f"üìã –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n{program_text}", reply_markup=main_menu)
    await state.clear()
