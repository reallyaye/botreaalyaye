# bot/handlers/programs.py

from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from services.programs import list_goals, list_types, get_program
from bot.keyboards import main_menu, cancel_button, cancel_keyboard

router = Router()

# 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É FSM
class ProgramForm(StatesGroup):
    goal   = State()   # –≤—ã–±–æ—Ä —Ü–µ–ª–∏
    p_type = State()   # –≤—ã–±–æ—Ä —Ç–∏–ø–∞

# 2) –•–µ–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞
@router.message(Command("gen_program"))
@router.message(lambda m: m.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def cmd_start_program(message: Message, state: FSMContext):
    await state.clear()
    goals = list_goals()
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=g)] for g in goals] + [[KeyboardButton(text=cancel_button.text)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã:", reply_markup=kb)
    await state.set_state(ProgramForm.goal)

# 3) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å
@router.message(StateFilter(ProgramForm.goal))
async def cmd_goal_chosen(message: Message, state: FSMContext):
    goal = message.text
    if goal not in list_goals():
        return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∫–Ω–æ–ø–∫–æ–π.", reply_markup=cancel_keyboard)
    await state.update_data(goal=goal)

    types = list_types(goal)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=t)] for t in types] + [[KeyboardButton(text=cancel_button.text)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã:", reply_markup=kb)
    await state.set_state(ProgramForm.p_type)

# 4) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø
@router.message(StateFilter(ProgramForm.p_type))
async def cmd_type_chosen(message: Message, state: FSMContext):
    data = await state.get_data()
    goal = data["goal"]
    p_type = message.text

    if p_type not in list_types(goal):
        return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–æ–π.", reply_markup=cancel_keyboard)

    program = get_program(goal, p_type)
    await state.clear()

    if not program:
        await message.answer("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è —Ü–µ–ª–∏ –∏ —Ç–∏–ø–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã.", reply_markup=main_menu)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    text = [f"üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è ¬´{goal} ‚Äì {p_type}¬ª –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"]
    for day, exercises in program.items():
        text.append(f"üìÖ {day}:")
        for ex in exercises:
            text.append(f" ‚Ä¢ {ex}")
        text.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏

    await message.answer("\n".join(text), reply_markup=main_menu)

# –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ main.py:
# dp.include_router(programs_router)
