# bot/handlers/programs.py

import os
from dotenv import load_dotenv
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from openai import OpenAI
from bot.keyboards import main_menu, cancel_keyboard

# –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env, —á—Ç–æ–±—ã os.getenv —É–≤–∏–¥–µ–ª –Ω–∞—à–∏ –∫–ª—é—á–∏
load_dotenv()

# –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∏–∑ –¥–≤—É—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
API_KEY = os.getenv("SAMBANOVA_API_KEY") or os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å SAMBANOVA_API_KEY –∏–ª–∏ OPENAI_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

client = OpenAI(
    api_key=API_KEY,
    base_url="https://api.sambanova.ai/v1",
)

router = Router()

class ProgramAI(StatesGroup):
    goal        = State()
    frequency   = State()
    preferences = State()

@router.message(lambda m: m.text == "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def ai_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üìù –ö–∞–∫–∞—è —É –≤–∞—Å –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É¬ª, ¬´–ø–æ—Ö—É–¥–µ—Ç—å¬ª, ¬´–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å¬ª.",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.goal)

@router.message(StateFilter(ProgramAI.goal))
async def ai_goal(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(goal=message.text)
    await message.answer(
        "üìÖ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.frequency)

@router.message(StateFilter(ProgramAI.frequency))
async def ai_frequency(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(frequency=message.text)
    await message.answer(
        "‚öôÔ∏è –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –∏–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é? –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª, –µ—Å–ª–∏ –±–µ–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.preferences)

@router.message(StateFilter(ProgramAI.preferences))
async def ai_preferences(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    data = await state.get_data()
    data["preferences"] = message.text

    await message.answer("üîç –°–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, "
        f"—Ü–µ–ª—å: ¬´{data['goal']}¬ª, "
        f"{data['frequency']} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é, "
        f"–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ¬´{data['preferences']}¬ª. "
        f"–ü–æ 3‚Äì5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –¥–µ–Ω—å, —Ä–∞–∑–ª–æ–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏."
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∫ API
    resp = client.chat.completions.create(
        model="DeepSeek-R1",
        messages=[
            {"role": "system", "content": "You are a professional fitness coach."},
            {"role": "user",   "content": prompt},
        ],
        temperature=0.1,
        top_p=0.1,
    )

    program_text = resp.choices[0].message.content.strip()
    await message.answer(f"üìã –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n{program_text}", reply_markup=main_menu)
    await state.clear()
