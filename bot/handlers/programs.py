# bot/handlers/programs.py

import os
import asyncio
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter
from openai import OpenAI

from bot.keyboards import main_menu, cancel_keyboard

# –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
from dotenv import load_dotenv
load_dotenv()
API_KEY = os.getenv("SAMBANOVA_API_KEY") or os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å SAMBANOVA_API_KEY –∏–ª–∏ OPENAI_API_KEY")

client = OpenAI(
    api_key=API_KEY,
    base_url="https://api.sambanova.ai/v1"
)

router = Router()

class ProgramAI(StatesGroup):
    goal          = State()
    frequency     = State()
    preferences   = State()
    sex           = State()
    age           = State()
    weight        = State()
    target_weight = State()

def split_text(text: str, max_len: int = 4000) -> list[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ max_len —Å–∏–º–≤–æ–ª–æ–≤, 
    –ø—ã—Ç–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫.
    """
    parts = []
    while len(text) > max_len:
        # –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã
        idx = text.rfind("\n", 0, max_len)
        if idx == -1:
            idx = max_len
        parts.append(text[:idx].strip())
        text = text[idx:].strip()
    if text:
        parts.append(text)
    return parts

@router.message(lambda m: m.text == "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def ai_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üéØ –ö–∞–∫–∞—è —É –≤–∞—Å –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã¬ª, ¬´–ø–æ—Ö—É–¥–µ—Ç—å¬ª)",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.goal)

@router.message(StateFilter(ProgramAI.goal))
async def ai_goal(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(goal=message.text)
    await message.answer(
        "üìÖ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.frequency)

@router.message(StateFilter(ProgramAI.frequency))
async def ai_frequency(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(frequency=message.text)
    await message.answer(
        "‚öôÔ∏è –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –∏–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª.",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.preferences)

@router.message(StateFilter(ProgramAI.preferences))
async def ai_preferences(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(preferences=message.text)
    await message.answer(
        "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º/–∂):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.sex)

@router.message(StateFilter(ProgramAI.sex))
async def ai_sex(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(sex=message.text)
    await message.answer(
        "üéÇ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.age)

@router.message(StateFilter(ProgramAI.age))
async def ai_age(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(age=message.text)
    await message.answer(
        "‚öñÔ∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥)?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.weight)

@router.message(StateFilter(ProgramAI.weight))
async def ai_weight(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(weight=message.text)
    await message.answer(
        "üèÅ –í–∞—à –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å (–∫–≥)?",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ProgramAI.target_weight)

@router.message(StateFilter(ProgramAI.target_weight))
async def ai_target_weight(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.update_data(target_weight=message.text)
    data = await state.get_data()

    await message.answer("üîç –°–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

    prompt = (
        "–°–æ—Å—Ç–∞–≤—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å —É—á—ë—Ç–æ–º:\n"
        f"‚Ä¢ –¶–µ–ª—å: {data['goal']}\n"
        f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {data['frequency']} —Ä–∞–∑/–Ω–µ–¥\n"
        f"‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {data['preferences']}\n"
        f"‚Ä¢ –ü–æ–ª: {data['sex']}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {data['weight']} –∫–≥\n"
        f"‚Ä¢ –ñ–µ–ª–∞–Ω–Ω—ã–π –≤–µ—Å: {data['target_weight']} –∫–≥\n"
        "–ü–æ 3‚Äì5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –¥–µ–Ω—å, —Ä–∞–∑–±–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏."
    )

    def _call_ai():
        return client.chat.completions.create(
            model="DeepSeek-R1",
            messages=[
                {"role": "system", "content": "You are a professional fitness coach."},
                {"role": "user",   "content": prompt}
            ],
            temperature=0.7,
            top_p=0.9,
        )

    try:
        resp = await asyncio.to_thread(_call_ai)
        program_text = resp.choices[0].message.content.strip()
    except Exception as e:
        await state.clear()
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", reply_markup=main_menu)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    for chunk in split_text(program_text):
        await message.answer(chunk)

    # –ü–æ—Å–ª–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ.", reply_markup=main_menu)
    await state.clear()
