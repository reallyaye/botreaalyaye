# bot/handlers/ai.py

import os
import asyncio
import openai
from aiogram import Router
from aiogram.types import Message
from aiogram.filters.command import Command


router = Router()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
client = openai.OpenAI(
    api_key=os.getenv("SAMBANOVA_API_KEY"),
    base_url="https://api.sambanova.ai/v1",
)

@router.message(Command("ask"))
async def ask_handler(message: Message):
    # –æ—Ç–ª–∞–¥–∫–∞, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç—Å—è
    await message.answer("üîç –Ø –≤–∞—Å —Å–ª—ã—à—É! –û–±—Ä–∞–±–æ—Ç–∫–∞ /ask...")

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    prompt = message.get_args().strip()
    if not prompt:
        return await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å: `/ask <–≤–∞—à –≤–æ–ø—Ä–æ—Å>`")

    await message.chat.post_action("typing")
    response = await asyncio.to_thread(
        lambda: client.chat.completions.create(
            model="DeepSeek-R1",
            messages=[
                {"role": "system", "content": "You are a helpful assistant"},
                {"role": "user",   "content": prompt},
            ],
            temperature=0.1,
            top_p=0.1,
        )
    )

    await message.answer(response.choices[0].message.content)

