# bot/handlers/ask.py

import os
import asyncio
import openai

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from bot.keyboards import main_menu

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
openai_client = openai.OpenAI(
    api_key=os.getenv("SAMBANOVA_API_KEY"),
    base_url="https://api.sambanova.ai/v1",
)

@router.message(Command("ask"))
async def ask_handler(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ask <—Ç–µ–∫—Å—Ç> —á–µ—Ä–µ–∑ Sambanova OpenAI."""
    text = message.text or ""
    prompt = text[len("/ask"):].strip()
    if not prompt:
        return await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–ª–µ /ask –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞
    await message.answer("üîç –Ø –≤–∞—Å —Å–ª—ã—à—É! –û–±—Ä–∞–±–æ—Ç–∫–∞ /ask...")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–ª—é—á –ø–æ–¥–≥—Ä—É–∑–∏–ª—Å—è
    api_key = os.getenv("SAMBANOVA_API_KEY")
    if not api_key:
        return await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è `SAMBANOVA_API_KEY` –Ω–µ –∑–∞–¥–∞–Ω–∞."
        )

    # –í—ã–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å asyncio-loop
    try:
        response = await asyncio.to_thread(
            openai_client.chat.completions.create,
            model="DeepSeek-R1",
            messages=[
                {"role": "system", "content": "You are a helpful assistant"},
                {"role": "user",   "content": prompt},
            ],
            temperature=0.1,
            top_p=0.1,
        )
    except Exception as e:
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:\n```\n{e}\n```")

    # –ò–∑–≤–ª–µ—á—ë–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    try:
        answer = response.choices[0].message.content
    except Exception as e:
        return await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç:\n```\n{e}\n```")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(answer, reply_markup=main_menu)
