# bot/handlers/ask.py

import os
import re
import asyncio
import openai

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from bot.keyboards import main_menu

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
openai_client = openai.OpenAI(
    api_key=os.getenv("SAMBANOVA_API_KEY"),
    base_url="https://api.sambanova.ai/v1",
)

@router.message(Command("ask"))
async def ask_handler(message: Message):
    text = message.text or ""
    prompt = text[len("/ask"):].strip()
    if not prompt:
        return await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–ª–µ /ask –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

    await message.answer("üîç –Ø –≤–∞—Å —Å–ª—ã—à—É! –û–±—Ä–∞–±–æ—Ç–∫–∞ /ask...")

    try:
        # –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å, –¥–∞—ë–º –µ–π —á—ë—Ç–∫–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å chain-of-thought
        response = await asyncio.to_thread(
            openai_client.chat.completions.create,
            model="DeepSeek-R1",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are a helpful assistant. "
                        "Provide only the final answer, without any internal reasoning or <think> tags."
                    )
                },
                {"role": "user", "content": prompt},
            ],
            temperature=0.1,
            top_p=0.1,
        )
    except Exception as e:
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:\n```\n{e}\n```")

    # –î–æ—Å—Ç–∞—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç
    raw = ""
    try:
        raw = response.choices[0].message.content or ""
    except Exception as e:
        return await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç:\n```\n{e}\n```")

    # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –≤–∫—Ä–∞–ø–ª–µ–Ω–∏—è <think>...</think>
    clean = re.sub(r"<think>.*?</think>", "", raw, flags=re.DOTALL).strip()

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç–æ ‚Äî –≤–µ—Ä–Ω—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    answer = clean if clean else raw

    await message.answer(answer, reply_markup=main_menu)
