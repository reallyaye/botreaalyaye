# bot/handlers/ask_ai.py

import os
import openai

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.keyboards import cancel_keyboard, main_menu

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI-–∫–ª–∏–µ–Ω—Ç–∞
openai.api_key = os.getenv("SAMBANOVA_API_KEY")

router = Router()


class AskAIState(StatesGroup):
    waiting_for_question = State()


@router.message(F.text == "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò")
async def ai_start(message: Message, state: FSMContext):
    # –æ—á–∏—â–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    # –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å
    await message.answer(
        "üñä –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:",
        reply_markup=cancel_keyboard
    )
    await state.set_state(AskAIState.waiting_for_question)


@router.message(StateFilter(AskAIState.waiting_for_question))
async def ai_handle(message: Message, state: FSMContext):
    question = message.text.strip()
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–û—Ç–º–µ–Ω–∞¬ª
    if question.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)

    # —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    await message.answer("üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    try:
        resp = openai.ChatCompletion.create(
            model="DeepSeek-R1",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": question},
            ],
            temperature=0.1,
            top_p=0.1,
        )
        answer = resp.choices[0].message.content
    except Exception as e:
        answer = f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:\n{e}"

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(answer, reply_markup=main_menu)
    await state.clear()
