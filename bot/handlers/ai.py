# bot/handlers/ask_ai.py

import os
from dotenv import load_dotenv

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from openai import OpenAI
from bot.keyboards import cancel_keyboard, main_menu

# –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –±–µ—Ä—ë–º –∫–ª—é—á –∏–∑ SAMBANOVA_API_KEY –∏–ª–∏ OPENAI_API_KEY
API_KEY = os.getenv("SAMBANOVA_API_KEY") or os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å SAMBANOVA_API_KEY –∏–ª–∏ OPENAI_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

# —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ SambaNova, —É–∫–∞–∂–∏—Ç–µ base_url)
client = OpenAI(
    api_key=API_KEY,
    base_url="https://api.sambanova.ai/v1"  # –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ OpenAI
)

router = Router()

class AskAIState(StatesGroup):
    waiting_for_question = State()

@router.message(F.text == "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò")
async def ai_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üñä –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:",
        reply_markup=cancel_keyboard
    )
    await state.set_state(AskAIState.waiting_for_question)

@router.message(StateFilter(AskAIState.waiting_for_question))
async def ai_handle(message: Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)

    await message.answer("üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    try:
        resp = client.chat.completions.create(
            model="DeepSeek-R1",  # –∏–ª–∏ "gpt-3.5-turbo" –¥–ª—è OpenAI
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user",   "content": text},
            ],
            temperature=0.1,
            top_p=0.1,
        )
        answer = resp.choices[0].message.content.strip()
    except Exception as e:
        answer = f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:\n{e}"

    await message.answer(answer, reply_markup=main_menu)
    await state.clear()
