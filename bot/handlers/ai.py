import os
import re
import asyncio
import openai

from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from bot.keyboards import main_menu, cancel_keyboard, cancel_button

router = Router()

# –∫–ª–∏–µ–Ω—Ç—ã OpenAI
openai_client = openai.OpenAI(
    api_key=os.getenv("SAMBANOVA_API_KEY"),
    base_url="https://api.sambanova.ai/v1",
)

class AskForm(StatesGroup):
    question = State()


@router.message(lambda m: m.text == "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò")
async def start_ask_flow(message: Message, state: FSMContext):
    await state.clear()
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    await state.update_data(history=[
        {"role": "system", "content": (
            "You are a helpful assistant. "
            "Answer without any internal reasoning tags."
        )}
    ])
    await message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(AskForm.question)


@router.message(lambda m: m.text == cancel_button.text, StateFilter(AskForm.question))
async def cancel_ask(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–∏–∞–ª–æ–≥ —Å –ò–ò –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu)


@router.message(StateFilter(AskForm.question))
async def process_ask(message: Message, state: FSMContext):
    data = await state.get_data()
    history = data.get("history", [])

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    history.append({"role": "user", "content": message.text})

    await state.update_data(history=history)
    await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", reply_markup=cancel_keyboard)

    try:
        # –≤—ã–∑—ã–≤–∞–µ–º –ò–ò —Å–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
        response = await asyncio.to_thread(
            openai_client.chat.completions.create,
            model="DeepSeek-R1",
            messages=history,
            temperature=0.1,
            top_p=0.1
        )
        ai_msg = response.choices[0].message.content or ""
    except Exception as e:
        await state.clear()
        return await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ API:\n```\n{e}\n```",
            reply_markup=main_menu
        )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏–∏
    history.append({"role": "assistant", "content": ai_msg})
    await state.update_data(history=history)

    # —á–∏—Å—Ç–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–≥–∏ <think>
    clean = re.sub(r"<think>.*?</think>", "", ai_msg, flags=re.DOTALL).strip()
    await message.answer(clean or ai_msg, reply_markup=cancel_keyboard)
    # **–ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ** ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ AskForm.question,
    # —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∂–µ –ø–æ—à—ë–ª –≤ —Ç–æ—Ç –∂–µ –ø–æ—Ç–æ–∫
