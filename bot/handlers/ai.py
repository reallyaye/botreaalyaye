import os
import re
import asyncio
import openai

from aiogram import Router
from aiogram.types import Message
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from bot.keyboards import main_menu, cancel_keyboard, cancel_button

router = Router()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
openai_client = openai.OpenAI(
    api_key=os.getenv("SAMBANOVA_API_KEY"),
    base_url="https://api.sambanova.ai/v1",
)

class AskForm(StatesGroup):
    question = State()

@router.message(lambda m: m.text == "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò")
async def start_ask_flow(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:",
        reply_markup=cancel_keyboard
    )
    await state.set_state(AskForm.question)

@router.message(lambda m: m.text == cancel_button.text, StateFilter(AskForm.question))
async def cancel_ask(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

@router.message(StateFilter(AskForm.question))
async def process_ask(message: Message, state: FSMContext):
    prompt = message.text.strip()
    await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", reply_markup=cancel_keyboard)

    try:
        response = await asyncio.to_thread(
            openai_client.chat.completions.create,
            model="DeepSeek-R1",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are a helpful assistant. "
                        "Provide only the final answer, without any internal reasoning or <think> tags."
                    )
                },
                {"role": "user", "content": prompt},
            ],
            temperature=0.1,
            top_p=0.1,
        )
        raw = response.choices[0].message.content or ""
    except Exception as e:
        await state.clear()
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:\n```\n{e}\n```", reply_markup=main_menu)

    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π <think>‚Ä¶</think>
    clean = re.sub(r"<think>.*?</think>", "", raw, flags=re.DOTALL).strip()
    answer = clean or raw

    await state.clear()
    await message.answer(answer, reply_markup=main_menu)

# (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ /ask, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è)
@router.message(Command("ask"))
async def ask_via_command(message: Message):
    # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ç–æ—Ç –∂–µ —Ä–µ–∂–∏–º, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞
    await start_ask_flow(message, message.bot.get('state'))  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ:
    # await start_ask_flow(message, FSMContext(...))
    # –Ω–æ –∫–æ–º–∞–Ω–¥–∞ /ask —Ç–µ–ø–µ—Ä—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
    pass
