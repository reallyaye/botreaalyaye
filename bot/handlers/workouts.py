# bot/handlers/workouts.py

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from services.db import add_workout, get_workouts
from bot.keyboards import main_menu, cancel_keyboard

router = Router()

class WorkoutForm(StatesGroup):
    workout_type = State()
    duration     = State()
    weight       = State()
    details      = State()

@router.message(Command("add_workout"))
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_add_flow(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è¬ª):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(WorkoutForm.workout_type)

@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞", StateFilter(WorkoutForm))
async def cancel_flow(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

@router.message(StateFilter(WorkoutForm.workout_type))
async def type_chosen(message: Message, state: FSMContext):
    await state.update_data(workout_type=message.text)
    await message.answer(
        "‚è± –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:",
        reply_markup=cancel_keyboard
    )
    await state.set_state(WorkoutForm.duration)

@router.message(StateFilter(WorkoutForm.duration))
async def duration_chosen(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.", reply_markup=cancel_keyboard)
    await state.update_data(duration=int(text))
    await message.answer(
        "‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å (–∫–≥):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(WorkoutForm.weight)

@router.message(StateFilter(WorkoutForm.weight))
async def weight_chosen(message: Message, state: FSMContext):
    text = message.text.replace(",", ".").strip()
    try:
        w = float(text)
    except ValueError:
        return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞.", reply_markup=cancel_keyboard)
    await state.update_data(weight=w)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–∏–ª–∏ ¬´–ù–µ—Ç¬ª):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(WorkoutForm.details)

@router.message(StateFilter(WorkoutForm.details))
async def details_chosen(message: Message, state: FSMContext):
    data = await state.get_data()
    workout_type = data["workout_type"]
    duration     = data["duration"]
    weight       = data["weight"]
    det_text     = message.text.strip()
    details = None if det_text.lower() in ("–Ω–µ—Ç", "-", "none") else det_text

    await add_workout(
        user_id=message.from_user.id,
        workout_type=workout_type,
        duration=duration,
        details=f"–≤–µ—Å: {weight} –∫–≥" + (f", {details}" if details else "")
    )

    reply = (
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n"
        f"‚Ä¢ –¢–∏–ø: {workout_type}\n"
        f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n"
        f"‚Ä¢ –í–µ—Å: {weight} –∫–≥"
    )
    if details:
        reply += f"\n‚Ä¢ –î–µ—Ç–∞–ª–∏: {details}"

    await message.answer(reply, reply_markup=main_menu)
    await state.clear()

@router.message(Command("view_workouts"))
@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def view_workouts(message: Message):
    rows = await get_workouts(message.from_user.id, limit=10)
    if not rows:
        return await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=main_menu)

    lines = []
    for _id, w_type, dur, det, created in rows:
        dt = created.split(".")[0]
        line = f"‚Ä¢ {dt}: {w_type}, {dur} –º–∏–Ω"
        if det:
            line += f" ({det})"
        lines.append(line)

    text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n" + "\n".join(lines)
    await message.answer(text, reply_markup=main_menu)
